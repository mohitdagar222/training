
**Strings-A String object in Ruby holds and manipulates an arbitrary sequence of one or more bytes, typically representing characters that represent human language.

**If you need to place an apostrophe within a single-quoted string literal, precede it with a backslash, so that the Ruby interpreter does not think that it terminates the string −

puts 'this is mohit\'s book'

Output-
this is mohit's book

--------------------------------------------------

**String Methods-
1)sub and sub!

*sub -substitute the string temporarily and only first string if two same are available if we again use that string than it will be in its original form

name= "mohit"
puts name.sub("it",'ini')
puts name
Output-
mohini
mohit

*sub! -substitute the string permanently


name= "mohit"
puts name.sub!("it",'ini')
puts name

2)gsub-Gsub is closest to a “replace string” method,gsub! change a string permanently

value='hello'
puts value
puts value.sub('l','*')
puts value.gsub('l','*')

Output-
hello
he*lo
he**o

3)methods for creating a string-

**new-With no arguments, returns the empty string with the Encoding ASCII-8BIT:
s = String.new
s.encoding  #output-Encoding:ASCII-8BIT

s=String.new('my name')
s.encoding #output-Encoding:UTF-8


**capacity-With keyword capacity, returns a copy of str; the given capacity may set the size of the internal buffer, which may affect performance:
String.new(capacity: 1)
The string, encoding, and capacity arguments may all be used together:
String.new('hello', encoding: 'UTF-8', capacity: 25)

**try_convert-Returns a new string created from a given object.

4)Methods for a Frozen/Unfrozen Strings
**freeze a string
a=String.new('hello')
a.freeze
a.replace('welcome')

Output-can't modify frozen String: "hello" (FrozenError)

**check string frozen or not-

a=String.new('hello')
a.freeze
b=String.new('welcome')
puts a.frozen?
puts b.frozen?

Output- true
	false


5) Methods for Querying String-

**length
a=String.new('hello')
puts a.length

Output-5

**When the single Integer argument index is given, returns the 1-character substring found in self at offset index:

a=String.new('hello')
puts a[2]
puts a[2]

Output-l
o

**empty?
a=String.new('hello')
puts a.empty?

Output-false

**bytesize-return the count of bytes
a=String.new('hello')
puts a.bytesize

Output-5

**count-Returns the count of substrings matching given strings.
It is used for count the substring or specific characters.

Example :

a=String.new('hello this is mohit')
puts a.count "hm"  # it counts the both h or m


Output-4



6)Substrings

** =~
Returns the index of the first substring that matches a given Regex

a=String.new('hello')
puts a =~ /e/  # it counts the both h or m

Output-1

**index-Returns the index of the first occurrence of a given substring
a=String.new('hello this is me mohit dagar') 
puts a.index('da')

Output-23

**rindex-Returns the index of the last occurrence of a given substring;

a=String.new('hello this is me mohit dagar') 
puts a.rindex('l')

Output-3

**include? -Returns true if the string contains a given substring;

a=String.new('hello this is me mohit dagar') 
puts a.include?('z')
Output-false

**match-Returns a MatchData object if the string matches a given Regexp

a=String.new('hello this is me mohit dagar') 
puts a.match('is')

Output- is


**match? -Returns true if the string matches a given Regexp

a=String.new('hello this is me mohit dagar') 
puts a.match?('mohit')

Output-true

**start_with? -Returns true if the string begins with any of the given substrings.

a=String.new('hello this is me mohit dagar') 
puts a.start_with?('mohit')
Output-false


**end_with? -Returns true if the string ends with any of the given substrings.

a=String.new('hello this is me mohit dagar') 
puts a.end_with?('dagar')
Output-true


















































