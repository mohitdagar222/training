
							FILE HANDLING

**Ruby provides a whole set of I/O-related methods implemented in the Kernel module. All the I/O methods are derived from the class IO.
  The class IO provides all the basic methods, such as read, write, gets, puts, readline, getc, and printf.

**opening and closing files

**File.new method = You can create a File object using File.new method for reading, writing, or both, according to the mode string. Finally, you can use File.close method to close that file.

aFile = File.new("filename", "mode")
   # ... process the file
aFile.close


**File.open method = You can use File.open method to create a new file object and assign that file object to a file.  File.open method can be associated with a block, whereas you cannot do the same using the File.new method.

File.open("filename", "mode") do |aFile|
   # ... process the file
end

==MODES 

r = Read-only mode. The file pointer is placed at the beginning of the file. This is the default mode.

r+ = Read-write mode. The file pointer will be at the beginning of the file.

a =Write-only mode. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.

a+ = Read and write mode. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.

w = Write-only mode. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.

w+ = Read-write mode. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.


-------------------------------------------------------------
**sysread method = You can use the method sysread to read the contents of a file. You can open the file in any of the modes when using the method sysread.


afile = File.new("input.txt", "r")
if afile
  content = afile.sysread(30)
  puts content
else
  puts "unable to open file"
end

#This statement will output the first 30 characters of the file.
# The file pointer will now be placed at the 31st character in the file.


**syswrite method = You can use the method syswrite to write the contents into a file. You need to open the file in write mode when using the method syswrite.


afile = File.new("input.txt", "a+")
if afile
  afile.syswrite("i am from gurugram")
else
  puts "unable to open file"
end


**each_byte method = This method belongs to the class File. The method each_byte is always associated with a block.

afile = File.new("input.txt", "a+")
if afile
  afile.each_byte { |ch| putc ch; putc ?. }
else
  puts "unable to open file"
end


---------------------------------------------------------------------

**IO.readline = File class is a subclass of IO class. One of the IO class methods is IO.readlines. This method returns the contents of the file line by line.

arr = IO.readlines("input.txt")
puts arr[0]
puts arr[1]


In this code, the variable arr is an array. Each line of the file input.txt will be an element in the array arr. Therefore, arr[0] will contain the first line, whereas arr[1] will contain the second line of the file.



**IO.foreach = This method also returns output line by line. The difference between the method foreach and the method readlines is that the method foreach is associated with a block. However, unlike the method readlines, the method foreach does not return an array.


IO.foreach("input.txt") { |lines| puts lines }


----------------------------------------------------------------------------

**Renaming and Deleting Files

