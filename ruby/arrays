
						Arrays Methods-


** Array-Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array.

** Creating Arrays-A new array can be created by using the literal constructor []. Arrays can contain different types of objects.

arr = ['name', 4, 'mohit', 'krishan']
print arr

Output-["name", 4, "mohit", "krishan"]

**An array can also be created by explicitly calling ::new with zero, one (the initial size of the Array) or two arguments (the initial size and a default object).

ary = Array.new    #=> []
Array.new(3)       #=> [nil, nil, nil]
Array.new(3, true) #=> [true, true, true]

---------------------------------------------------------------------
**Accessing Elements -Elements in an array can be retrieved using the #[] method. It can take a single integer argument (a numeric index), a pair of arguments (start and length) or a range. 

arr = [1, 2, 3, 4, 5, 6]
print arr[2] 
 puts  
print arr[100] 
 puts
print arr[-3] 
puts 
print arr[2, 3]
 puts
print arr[1..4] 
puts
print arr[1..-3] 
puts

Output
-3

4
[3, 4, 5]
[2, 3, 4, 5]
[2, 3, 4]



**arr.at(), arr.last(), arr.first, arr.take(), arr.drop()

arr = [1, 2, 3, 4, 5, 6]
print arr.last
puts
print arr.first
puts
print arr.at(4)
puts 
print arr.take(3)
puts 
print arr.drop(1)
puts 
print arr
puts

Output -
6
1
5
[1, 2, 3]
[2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]

-------------------------------------------------------------------------------------------------------------

**obtaining information about an array-

**length,count, size -

states = ["Haryana", "UP", "West Bengal", "Chandigarh"]
puts states.length
puts states.count
puts states.size

Output-

4
4
4

**empty?, include?() -to check whether array is empty or not ,to check an element is included or not

states = ["Haryana", "UP", "West Bengal", "Chandigarh"]
puts states.empty?
puts states.include?("West Bengal")

Output-False
True

--------------------------------------------------------------------------------------

**Adding items to arrays

** push, <<


states = ["Haryana", "UP", "West Bengal", "Chandigarh"]
print states.push("Bihar")
puts
print states << "Assam"
puts

Output-
["Haryana", "UP", "West Bengal", "Chandigarh", "Bihar"]
["Haryana", "UP", "West Bengal", "Chandigarh", "Bihar", "Assam"]


**unshift, insert()-to add elements at the begining of array

states = ["Haryana", "UP", "West Bengal", "Chandigarh"]
print states.unshift("Bihar")
puts
print states.insert(1,"Assam")
puts

Output-
["Bihar", "Haryana", "UP", "West Bengal", "Chandigarh"]
["Bihar", "Assam", "Haryana", "UP", "West Bengal", "Chandigarh"]


---------------------------------------------------------------

**Removing items from an array

** shift, pop, compact, uniq, delete() --remove first element,remove last element,remove null, remove duplicates, remove specified index element-


states = ["Haryana", "UP", "West Bengal", nil,"Chandigarh", "UP", "UP"]
print states.pop
puts
print states.shift
puts 
print states.delete_at(1)
puts
print states.compact
puts
print states.uniq
puts 
print states.delete("Chandigarh")
puts
print states
puts

Output-UP
Haryana
West Bengal
["UP", "Chandigarh", "UP"]
["UP", nil, "Chandigarh"]
Chandigarh
["UP", nil, "UP"]

------------------------------------------------------------------------------------------------
**Iterating over Arrays

**Each and reverse_each -which defines what elements should be iterated over and how, Another sometimes useful iterator is reverse_each which will iterate over the elements in the array in reverse order.

arr = [1, 2, 3, 4, 5]
arr.each{|a| print a -= 10, " "}
words = ["one","two","three"]
str=" "
words.reverse_each{|word| str += "#{word} "}  
puts
puts str

Output--9 -8 -7 -6 -5 
 three two one 



**map -The map method can be used to create a new array based on the original array

arr = [1, 2, 3, 4, 5]
print  arr.map{|a| a*2}
puts


Output-[2, 4, 6, 8, 10]

**Non-destructive Selection

arr = [1, 2, 3, 4, 5, 6]
print arr.select {|a| a > 3}       #=> [4, 5, 6]
print arr.reject {|a| a < 3}       #=> [3, 4, 5, 6]
print arr.drop_while {|a| a < 4}   #=> [4, 5, 6]
print arr                          #=> [1, 2, 3, 4, 5, 6]




**destructive selection

arr.delete_if {|a| a < 4}   #=> [4, 5, 6]
printarr                         #=> [4, 5, 6]

arr = [1, 2, 3, 4, 5, 6]
arr.keep_if {|a| a < 4}   #=> [1, 2, 3]
print arr                       #=> [1, 2, 3]


------------------------------------------------------------------------------------------

**methods for querying-


**all? -if all elements meets the given criteria//**any? returns true if any element meets the given criteria

arr = [0, 1, 2]
arr.all? { |element| element < 3 }
Output-true


**index-Returns the index of a specified element.

arr = [1, 2, 3, 4, 5]
print  arr.index(2)
puts

Output=1


**rindex -Returns the index of the last element that meets a given criterion.

arr = [1, 2, 3, 4, 5,2]
print  arr.index(2)
puts


Output=5

**hash-Returns the integer hash code.

arr = [1, 2, 3, 4, 5]
print  arr.hash == [2, 3, 4]
puts

Output-False

---------------------------------------------------------------------------------------------------

**
