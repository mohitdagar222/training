
**rvm installation


**Pre-requisites-
sudo apt-get install software-properties-common
	
**Add the PPA and install the package-
sudo apt-add-repository -y ppa:rael-gc/rvm
sudo apt-get update
sudo apt-get install rvm
	
**Add your user to rvm group ($USER will automatically insert your username):
sudo usermod -a -G rvm $USER

**Change your terminal window
At terminal window, click Edit > Profile Preferences, click on Title and Command tab and check Run command as login shell.

**now reboot the system

**Enable local gemsets
rvm user gemsets

**Install a ruby
rvm install ruby
sudo apt  install ruby

**now install ruby versions
rvm install 2.7.5
rvm install 2.5.7

------------------------------------------------
beryl@beryl-ThinkPad-L412:~$ rvm list
=> ruby-2.1.0 [ x86_64 ]
 * ruby-2.7.5 [ x86_64 ]
   ruby-3.0.0 [ x86_64 ]

# => - current
# =* - current && default
#  * - default

beryl@beryl-ThinkPad-L412:~$ rvm use 2.1.0
Using /home/beryl/.rvm/gems/ruby-2.1.0


beryl@beryl-ThinkPad-L412:~$ rvm install 2.5.7

beryl@beryl-ThinkPad-L412:~$ rvm -v
rvm 1.29.12 (manual) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]


beryl@beryl-ThinkPad-L412:~$ ruby -v
ruby 2.1.0p0 (2013-12-25 revision 44422) [x86_64-linux]

-------------------------------------------------------------

**Simple Program =puts "Hello ,Mohit Dagar!"
Output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
Hello ,Mohit Dagar!


**HERE DOCUMENT
print <<ai  # simple to write strings
Hello this is here document in ruby
This is last line.
ai

print <<"am"
Hello this is another type
This is last line 
am

 print <<`aj`   #to execute commands

echo it is another type
echo it is last 
aj

print <<"fo",<<"lo"  #to build stack

this is fo line
fo
this is lo line
lo

OUTPUT-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
Hello this is here document in ruby
This is last line.
Hello this is another type
This is last line 
it is another type
it is last

this is fo line
this is lo line



** BEGIN STATEMENT


puts "hello world"

BEGIN{

puts "statement to be printed before code execution"
}

OUTPUT:
beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
statement to be printed before code execution
hello world


**END STATEMENT


puts "this is main program"


END{
puts "this is end code of the program"
}
BEGIN{

puts "this is begining of the program"
}

OUTPUT-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
this is begining of the program
this is main program
this is end code of the program


-------------------------------------------------
Class and Objects

A class is a blueprint from which objects are created. The object is also called as an instance of a class. For Example, the animal is a class and mammals, birds, fish, reptiles, and amphibians are the instances of the class
Syntax-
class Class_name

end

Object-object_name = Class_name.new


In Ruby member functions are called as methods. Every method is defined by the def keyword followed by a method name. The name of the method is always in lowercase and the method ends with end keyword. In Ruby, each class and methods end with end keyword.

-------------------------------------------------

Variables-

Ruby Global Variables-A global variable name always starts with $. If you want to have a single variable, which is available across classes, you need to define a global variable.

$global_variable=20

class Class1
	def method
		puts "calling global varible by first class value is #$global_variable"

	end
end

class Class2
	def methods

		puts "calling global variable my class 2 whose value is #$global_variable"
	end
end

obj1=Class1.new
obj2=Class2.new
obj1.method
obj2.methods
Output-

beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
calling global varible by first class value is 20
calling global variable my class 2 whose value is 20



**Ruby Local Variables:it has access in that particular method. A local variable name always starts with a lowercase letter(a-z) or underscore (_). These variables are local to the code construct in which they are declared. A local variable is only accessible within the block of its initialization. 

**Ruby Class Variables: it is same for all objects. A class variable name always starts with @@ sign.It is available across different objects. Another way of thinking about class variables is as global variables within the context of a single class.

class Students
@@studentn=0
def initialize(id,name,add)
	@id=id
	@name=name
	@add=add
end

def display()
	puts "id is #@id"
	puts "name is #@name"
	puts "add is #@add"
end

def student_number()
	
	@@studentn=@@studentn + 1
	puts "student numbers is #@@studentn"
end
end

st1=Students.new("1","krishan","hodal")
st2=Students.new("2","mohit","palwal")

st1.display()
st1.student_number()
st2.display()
st2.student_number()

Output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
id is 1
name is krishan
add is hodal
student numbers is 1
id is 2
name is mohit
add is palwal
student numbers is 2



**Ruby Instance Variables: it is diff for all objects and we can access it on all methods.An instance variable name always starts with a @ sign. They are similar to Class variables but their values are local to specific instances of an object. Instance variables are available across methods for any specified instance or object i.e. instance variables can change from object to object

Output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
id is 1
name is krishan
add is hodal
id is 2
name is mohit
add is palwal


--------------------------------------------------------
**Ruby multiple comments-

puts "Hello, Ruby!"

=begin
This is a multiline comment lines as you
like. But =begin and =end should come in the first line only. 
=end

**IF ELSE PROGRAM
x = 3

if x>4
	puts "x is greater than 4"

elsif x<4
	puts"x is less than 4"

else
	puts "number is 4"

end

Output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
x is less than 4

**use if modifier
$mohit="name"

puts "#$mohit\n" if $mohit
output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
name




** unless modifier-executes code if condition is false
$mohit="name"

print "mohit variable is given" unless $mohit

print "subject variable is not given above\n" unless $subject

output-beryl@beryl-ThinkPad-L412:~/Documents$ ruby test.rb
subject variable is not given above


**Ruby Case Statement-

@age=25
case @age
when 0 .. 5
    puts "baby"
when 6 .. 20
    puts "child"
when 21 .. 30
    puts "mature"
else 
    puts"old"
end

Output-
@age=25
case @age
when 0 .. 5
    puts "baby"
when 6 .. 20
    puts "child"
when 21 .. 30
    puts "mature"
else 
    puts"old"
end






